type User {
  _id: ID
  username: String
  email: String!
  password: String!
  avatar: String
  joinDate: String
  favorites: [Post]
}

type Author {
  _id: ID
  name: String!
  age: Int!
  book: [Book]
}


type Post {
  _id: ID!
  title: String!
  imageUrl: String!
  categories: [String]!
  description: String!
  likes: Int!
  createdDate: String
  messages: [Message]
  createdBy: User!
}



type Book {
  _id:ID
  name: String
  genre: String
  createdBy: Author
}


type Message {
  _id: ID
  messageBody: String!
  messageDate: String
  messageUser: User!
}


type Token {
  token: String!
}

type PostsPage {
  posts: [Post]
  hasMore: Boolean
}



type Query {
  getCurrentUser: User,
  getPosts: [Post],
  getPost(postId: ID!): Post!,
  getBooks: [Book],
  getBook(name: String): Book,
  getAuthors: [Author],
  getUsers: [User],
  infiniteScrollPosts(pageNum: Int!, pageSize: Int!): PostsPage
}

type Mutation {
  addPost(title: String!, imageUrl:String!, categories: [String]!, likes: Int!, description: String!, creatorId: ID!): Post!
  signinUser(email: String!, password: String): Token

  signupUser(username: String, email: String!, password: String!, avatar:String, joinDate:String): Token
  
  addBook(name: String!, genre: String!, creatorId: ID!): Book!
  addAuthor(name: String!, age: Int!, bookId: ID, _id:ID): Author!
  addPostMessage(messageBody: String!, userId: ID!, postId: ID!): Message!
}

